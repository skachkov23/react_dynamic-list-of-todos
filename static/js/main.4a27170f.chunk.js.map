{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Api","TodoList","state","todos","searchQuery","settingsOfVisibility","fetch","then","response","json","sort","todo1","todo2","userId","setState","this","visibleList","filter","todo","title","toLowerCase","includes","completed","className","placeholder","value","onChange","event","target","map","classNames","TodoList__item","htmlFor","name","type","props","selectedUserId","onClick","changeUser","id","React","Component","CurrentUser","useState","selectedUser","setSelectedUser","useEffect","catch","user","email","phone","App","a","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a27170f.chunk.js","sourcesContent":["const Api = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${Api}/todos`)\n    .then(response => response.json())\n    .then(todos => todos.sort((todo1: Todo, todo2: Todo) => todo1.userId - todo2.userId));\n}\n\nexport function getUser(userId: number): Promise<User> {\n  return fetch(`${Api}/users/${userId}`)\n    .then(response => response.json())\n    .catch(() => ({\n      id: 0,\n    }))\n    .then(user => user);\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  changeUser(id: number): void;\n};\n\ntype State = {\n  todos: Todo[];\n  searchQuery: string;\n  settingsOfVisibility: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    searchQuery: '',\n    settingsOfVisibility: '',\n  };\n\n  componentDidMount() {\n    getTodos().then(todos => this.setState({ todos }));\n  }\n\n  render() {\n    const { todos, searchQuery, settingsOfVisibility } = this.state;\n    const visibleList = todos\n      .filter(todo => {\n        if (!todo.title.toLowerCase().includes(searchQuery.toLowerCase())) {\n          return false;\n        }\n\n        if (settingsOfVisibility === 'active' && todo.completed) {\n          return false;\n        }\n\n        if (settingsOfVisibility === 'completed' && !todo.completed) {\n          return false;\n        }\n\n        return true;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <input\n          placeholder=\"Search\"\n          value={searchQuery}\n          onChange={event => this.setState({ searchQuery: event.target.value })}\n        />\n        <select\n          onChange={event => this.setState({ settingsOfVisibility: event.target.value })}\n        >\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleList.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  {\n                    TodoList__item: true,\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label htmlFor=\"input\">\n                  <input\n                    name=\"input\"\n                    type=\"checkbox\"\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': this.props.selectedUserId === todo.userId },\n                  )}\n                  type=\"button\"\n                  onClick={() => this.props.changeUser(todo.userId)}\n                >\n                  {`User: #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  changeUser(id: number): void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ selectedUserId, changeUser }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedUserId).then(user => setSelectedUser(user));\n  });\n\n  return selectedUser && (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{selectedUser.id ? `Selected user: ${selectedUser.id}` : 'No such user'}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n      <button\n        type=\"button\"\n        onClick={() => changeUser(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  changeUser = async (id: number) => {\n    const { selectedUserId } = this.state;\n\n    if (selectedUserId !== id) {\n      this.setState({ selectedUserId: id });\n    }\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList changeUser={this.changeUser} selectedUserId={selectedUserId} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser selectedUserId={selectedUserId} changeUser={this.changeUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}